 pile_t *pile = init_pile();

    ajouter( top(pile), "KOUKOU", INT_T);

    table_t *t = nouvelle_table();
    push(pile, t);
    ajouter(t, "JACHETE", STRUCT_T);

    printf( "%d", find(pile, "KOUKOU")->type);
    printf( "%d", find(pile, "JACHETE")->type);
    
    ajouter(top(pile), "KOUKOU", INT_T);
    find(pile, "KOUKOU")->type = STRUCT_T;
    printf( "%d", find(pile, "KOUKOU")->type);

    pop(pile);
    printf("%d", find(pile, "KOUKOU")->type);
    printf("%d", find(pile, "JACHETE")==NULL);



arbre_t *base_int1= basic_type(INT_T, "");
    arbre_t *base_int2= basic_type(INT_T, "");
    arbre_t *base_int3= basic_type(INT_T, "");
    arbre_t *base_int4= basic_type(INT_T, "");
    arbre_t *base_voidd= basic_type(VOID_T, "");
    arbre_t *ptr_int1= ptr_type(base_int1, "");
    arbre_t *ptr_int2= ptr_type(base_int2, "");
    arbre_t *ptr_voidd= ptr_type(base_voidd, "");

    arbre_t *prod_int1= prod_type(base_int1, base_int2, "");
    arbre_t *prod_int2= prod_type(base_int3, base_int4, "");
    arbre_t *prod_div= prod_type(base_int1, base_voidd, "");

    arbre_t *prod4= prod_type(ptr_int1, prod_int1, "");
    arbre_t *prod5= prod_type(ptr_int2, prod_int2, "");
    arbre_t *prod6= prod_type(ptr_int1, prod_div, "");

    arbre_t *fct1= fct_type(prod_int1, base_int3, "");
    arbre_t *fct2= fct_type(prod_int2, base_int4, "");
    arbre_t *fct3= fct_type(prod_div, base_int4, "");
    arbre_t *fct4= fct_type(prod_int2, base_voidd, "");
    arbre_t *fct5= fct_type(prod_int1, ptr_int1, "");
    arbre_t *fct6= fct_type(prod_int2, ptr_int2, "");
    arbre_t *fct7= fct_type(prod_int1, ptr_voidd, "");

    printf("int et int (1): %d\n", compare_arbre_t(base_int1, base_int2));
    printf("int et void (0): %d\n", compare_arbre_t(base_int1, base_voidd));
    printf("ptr_int et ptr_int (1): %d\n", compare_arbre_t(ptr_int1, ptr_int2));
    printf("ptr_int et ptr_void (0): %d\n", compare_arbre_t(ptr_int1, ptr_voidd));
    printf("prod_int et prod_int (1): %d\n", compare_arbre_t(prod_int1, prod_int2));

    printf("prod4 et prod5 (1): %d\n", compare_arbre_t(prod4, prod5));
    printf("prod5 et prod6 (0): %d\n", compare_arbre_t(prod5, prod6));
    
    printf("fct1 et fct2 (1): %d\n", compare_arbre_t(fct1, fct2));
    printf("fct1 et fct3 (0): %d\n", compare_arbre_t(fct1, fct3));
    printf("fct2 et fct4 (0): %d\n", compare_arbre_t(fct2, fct4));
    printf("fct5 et fct6 (1): %d\n", compare_arbre_t(fct5, fct6));
    printf("fct6 et fct7 (0): %d\n", compare_arbre_t(fct6, fct7));

printf("%s\n", draw_type_expr(base_int1));
printf("%s\n", draw_type_expr(base_int2));
printf("%s\n", draw_type_expr(base_int3));
printf("%s\n", draw_type_expr(base_int4));
printf("%s\n", draw_type_expr(base_voidd));
printf("%s\n", draw_type_expr(ptr_int1));
printf("%s\n", draw_type_expr(ptr_int2));
printf("%s\n", draw_type_expr(ptr_voidd));

printf("%s\n", draw_type_expr(prod_int1));
printf("%s\n", draw_type_expr(prod_int2));
printf("%s\n", draw_type_expr(prod_div));

printf("%s\n", draw_type_expr(prod4));
printf("%s\n", draw_type_expr(prod5));
printf("%s\n", draw_type_expr(prod6));

printf("%s\n", draw_type_expr(fct1));
printf("%s\n", draw_type_expr(fct2));
printf("%s\n", draw_type_expr(fct3));
printf("%s\n", draw_type_expr(fct4));
printf("%s\n", draw_type_expr(fct5));
printf("%s\n", draw_type_expr(fct6));
printf("%s\n", draw_type_expr(fct7)); 


