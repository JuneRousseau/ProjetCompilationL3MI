Grammaire

    0 $accept: program $end

    1 primary_expression: IDENTIFIER
    2                   | CONSTANT

    3 postfix_expression: primary_expression
    4                   | postfix_expression '(' ')'
    5                   | postfix_expression '(' argument_expression_list ')'

    6 argument_expression_list: primary_expression
    7                         | argument_expression_list ',' primary_expression

    8 unary_expression: postfix_expression
    9                 | unary_operator primary_expression

   10 unary_operator: '&'
   11               | '*'
   12               | '-'

   13 multiplicative_expression: unary_expression
   14                          | primary_expression '*' primary_expression
   15                          | primary_expression '/' primary_expression

   16 additive_expression: multiplicative_expression
   17                    | primary_expression '+' primary_expression
   18                    | primary_expression '-' primary_expression

   19 relational_expression: additive_expression
   20                      | primary_expression '<' primary_expression
   21                      | primary_expression '>' primary_expression
   22                      | primary_expression LE_OP primary_expression
   23                      | primary_expression GE_OP primary_expression

   24 equality_expression: relational_expression
   25                    | primary_expression EQ_OP primary_expression
   26                    | primary_expression NE_OP primary_expression

   27 expression: equality_expression
   28           | unary_operator primary_expression '=' primary_expression
   29           | primary_expression '=' additive_expression

   30 declaration: declaration_specifiers declarator ';'

   31 declaration_specifiers: EXTERN type_specifier
   32                       | type_specifier

   33 type_specifier: VOID
   34               | INT

   35 declarator: '*' direct_declarator
   36           | direct_declarator

   37 direct_declarator: IDENTIFIER
   38                  | '(' declarator ')'
   39                  | direct_declarator '(' parameter_list ')'
   40                  | direct_declarator '(' ')'

   41 parameter_list: parameter_declaration
   42               | parameter_list ',' parameter_declaration

   43 parameter_declaration: declaration_specifiers declarator

   44 statement: compound_statement
   45          | labeled_statement
   46          | expression_statement
   47          | selection_statement
   48          | jump_statement

   49 compound_statement: '{' '}'
   50                   | '{' statement_list '}'
   51                   | '{' declaration_list '}'
   52                   | '{' declaration_list statement_list '}'

   53 declaration_list: declaration
   54                 | declaration_list declaration

   55 statement_list: statement
   56               | statement_list statement

   57 labeled_statement: IDENTIFIER ':' statement

   58 expression_statement: ';'
   59                     | expression ';'

   60 selection_statement: IF '(' equality_expression ')' GOTO IDENTIFIER ';'

   61 jump_statement: RETURN ';'
   62               | RETURN expression ';'
   63               | GOTO IDENTIFIER ';'

   64 program: external_declaration
   65        | program external_declaration

   66 external_declaration: function_definition
   67                     | declaration

   68 function_definition: declaration_specifiers declarator compound_statement


Terminaux, suivis des règles où ils apparaissent

$end (0) 0
'&' (38) 10
'(' (40) 4 5 38 39 40 60
')' (41) 4 5 38 39 40 60
'*' (42) 11 14 35
'+' (43) 17
',' (44) 7 42
'-' (45) 12 18
'/' (47) 15
':' (58) 57
';' (59) 30 58 59 60 61 62 63
'<' (60) 20
'=' (61) 28 29
'>' (62) 21
'{' (123) 49 50 51 52
'}' (125) 49 50 51 52
error (256)
IDENTIFIER (258) 1 37 57 60 63
CONSTANT (259) 2
LE_OP (260) 22
GE_OP (261) 23
EQ_OP (262) 25
NE_OP (263) 26
EXTERN (264) 31
INT (265) 34
VOID (266) 33
IF (267) 60
RETURN (268) 61 62
GOTO (269) 60 63


Non-terminaux, suivis des règles où ils apparaissent

$accept (30)
    à gauche: 0
primary_expression (31)
    à gauche: 1 2, à droite: 3 6 7 9 14 15 17 18 20 21 22 23 25 26
    28 29
postfix_expression (32)
    à gauche: 3 4 5, à droite: 4 5 8
argument_expression_list (33)
    à gauche: 6 7, à droite: 5 7
unary_expression (34)
    à gauche: 8 9, à droite: 13
unary_operator (35)
    à gauche: 10 11 12, à droite: 9 28
multiplicative_expression (36)
    à gauche: 13 14 15, à droite: 16
additive_expression (37)
    à gauche: 16 17 18, à droite: 19 29
relational_expression (38)
    à gauche: 19 20 21 22 23, à droite: 24
equality_expression (39)
    à gauche: 24 25 26, à droite: 27 60
expression (40)
    à gauche: 27 28 29, à droite: 59 62
declaration (41)
    à gauche: 30, à droite: 53 54 67
declaration_specifiers (42)
    à gauche: 31 32, à droite: 30 43 68
type_specifier (43)
    à gauche: 33 34, à droite: 31 32
declarator (44)
    à gauche: 35 36, à droite: 30 38 43 68
direct_declarator (45)
    à gauche: 37 38 39 40, à droite: 35 36 39 40
parameter_list (46)
    à gauche: 41 42, à droite: 39 42
parameter_declaration (47)
    à gauche: 43, à droite: 41 42
statement (48)
    à gauche: 44 45 46 47 48, à droite: 55 56 57
compound_statement (49)
    à gauche: 49 50 51 52, à droite: 44 68
declaration_list (50)
    à gauche: 53 54, à droite: 51 52 54
statement_list (51)
    à gauche: 55 56, à droite: 50 52 56
labeled_statement (52)
    à gauche: 57, à droite: 45
expression_statement (53)
    à gauche: 58 59, à droite: 46
selection_statement (54)
    à gauche: 60, à droite: 47
jump_statement (55)
    à gauche: 61 62 63, à droite: 48
program (56)
    à gauche: 64 65, à droite: 0 65
external_declaration (57)
    à gauche: 66 67, à droite: 64 65
function_definition (58)
    à gauche: 68, à droite: 66


État 0

    0 $accept: . program $end

    EXTERN  décalage et aller à l'état 1
    INT     décalage et aller à l'état 2
    VOID    décalage et aller à l'état 3

    declaration             aller à l'état 4
    declaration_specifiers  aller à l'état 5
    type_specifier          aller à l'état 6
    program                 aller à l'état 7
    external_declaration    aller à l'état 8
    function_definition     aller à l'état 9


État 1

   31 declaration_specifiers: EXTERN . type_specifier

    INT   décalage et aller à l'état 2
    VOID  décalage et aller à l'état 3

    type_specifier  aller à l'état 10


État 2

   34 type_specifier: INT .

    $défaut  réduction par utilisation de la règle 34 (type_specifier)


État 3

   33 type_specifier: VOID .

    $défaut  réduction par utilisation de la règle 33 (type_specifier)


État 4

   67 external_declaration: declaration .

    $défaut  réduction par utilisation de la règle 67 (external_declaration)


État 5

   30 declaration: declaration_specifiers . declarator ';'
   68 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  décalage et aller à l'état 11
    '('         décalage et aller à l'état 12
    '*'         décalage et aller à l'état 13

    declarator         aller à l'état 14
    direct_declarator  aller à l'état 15


État 6

   32 declaration_specifiers: type_specifier .

    $défaut  réduction par utilisation de la règle 32 (declaration_specifiers)


État 7

    0 $accept: program . $end
   65 program: program . external_declaration

    $end    décalage et aller à l'état 16
    EXTERN  décalage et aller à l'état 1
    INT     décalage et aller à l'état 2
    VOID    décalage et aller à l'état 3

    declaration             aller à l'état 4
    declaration_specifiers  aller à l'état 5
    type_specifier          aller à l'état 6
    external_declaration    aller à l'état 17
    function_definition     aller à l'état 9


État 8

   64 program: external_declaration .

    $défaut  réduction par utilisation de la règle 64 (program)


État 9

   66 external_declaration: function_definition .

    $défaut  réduction par utilisation de la règle 66 (external_declaration)


État 10

   31 declaration_specifiers: EXTERN type_specifier .

    $défaut  réduction par utilisation de la règle 31 (declaration_specifiers)


État 11

   37 direct_declarator: IDENTIFIER .

    $défaut  réduction par utilisation de la règle 37 (direct_declarator)


État 12

   38 direct_declarator: '(' . declarator ')'

    IDENTIFIER  décalage et aller à l'état 11
    '('         décalage et aller à l'état 12
    '*'         décalage et aller à l'état 13

    declarator         aller à l'état 18
    direct_declarator  aller à l'état 15


État 13

   35 declarator: '*' . direct_declarator

    IDENTIFIER  décalage et aller à l'état 11
    '('         décalage et aller à l'état 12

    direct_declarator  aller à l'état 19


État 14

   30 declaration: declaration_specifiers declarator . ';'
   68 function_definition: declaration_specifiers declarator . compound_statement

    ';'  décalage et aller à l'état 20
    '{'  décalage et aller à l'état 21

    compound_statement  aller à l'état 22


État 15

   36 declarator: direct_declarator .
   39 direct_declarator: direct_declarator . '(' parameter_list ')'
   40                  | direct_declarator . '(' ')'

    '('  décalage et aller à l'état 23

    $défaut  réduction par utilisation de la règle 36 (declarator)


État 16

    0 $accept: program $end .

    $défaut  accepter


État 17

   65 program: program external_declaration .

    $défaut  réduction par utilisation de la règle 65 (program)


État 18

   38 direct_declarator: '(' declarator . ')'

    ')'  décalage et aller à l'état 24


État 19

   35 declarator: '*' direct_declarator .
   39 direct_declarator: direct_declarator . '(' parameter_list ')'
   40                  | direct_declarator . '(' ')'

    '('  décalage et aller à l'état 23

    $défaut  réduction par utilisation de la règle 35 (declarator)


État 20

   30 declaration: declaration_specifiers declarator ';' .

    $défaut  réduction par utilisation de la règle 30 (declaration)


État 21

   49 compound_statement: '{' . '}'
   50                   | '{' . statement_list '}'
   51                   | '{' . declaration_list '}'
   52                   | '{' . declaration_list statement_list '}'

    IDENTIFIER  décalage et aller à l'état 25
    CONSTANT    décalage et aller à l'état 26
    EXTERN      décalage et aller à l'état 1
    INT         décalage et aller à l'état 2
    VOID        décalage et aller à l'état 3
    IF          décalage et aller à l'état 27
    RETURN      décalage et aller à l'état 28
    GOTO        décalage et aller à l'état 29
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32
    ';'         décalage et aller à l'état 33
    '{'         décalage et aller à l'état 21
    '}'         décalage et aller à l'état 34

    primary_expression         aller à l'état 35
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 38
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 42
    expression                 aller à l'état 43
    declaration                aller à l'état 44
    declaration_specifiers     aller à l'état 45
    type_specifier             aller à l'état 6
    statement                  aller à l'état 46
    compound_statement         aller à l'état 47
    declaration_list           aller à l'état 48
    statement_list             aller à l'état 49
    labeled_statement          aller à l'état 50
    expression_statement       aller à l'état 51
    selection_statement        aller à l'état 52
    jump_statement             aller à l'état 53


État 22

   68 function_definition: declaration_specifiers declarator compound_statement .

    $défaut  réduction par utilisation de la règle 68 (function_definition)


État 23

   39 direct_declarator: direct_declarator '(' . parameter_list ')'
   40                  | direct_declarator '(' . ')'

    EXTERN  décalage et aller à l'état 1
    INT     décalage et aller à l'état 2
    VOID    décalage et aller à l'état 3
    ')'     décalage et aller à l'état 54

    declaration_specifiers  aller à l'état 55
    type_specifier          aller à l'état 6
    parameter_list          aller à l'état 56
    parameter_declaration   aller à l'état 57


État 24

   38 direct_declarator: '(' declarator ')' .

    $défaut  réduction par utilisation de la règle 38 (direct_declarator)


État 25

    1 primary_expression: IDENTIFIER .
   57 labeled_statement: IDENTIFIER . ':' statement

    ':'  décalage et aller à l'état 58

    $défaut  réduction par utilisation de la règle 1 (primary_expression)


État 26

    2 primary_expression: CONSTANT .

    $défaut  réduction par utilisation de la règle 2 (primary_expression)


État 27

   60 selection_statement: IF . '(' equality_expression ')' GOTO IDENTIFIER ';'

    '('  décalage et aller à l'état 59


État 28

   61 jump_statement: RETURN . ';'
   62               | RETURN . expression ';'

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32
    ';'         décalage et aller à l'état 61

    primary_expression         aller à l'état 35
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 38
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 42
    expression                 aller à l'état 62


État 29

   63 jump_statement: GOTO . IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 63


État 30

   10 unary_operator: '&' .

    $défaut  réduction par utilisation de la règle 10 (unary_operator)


État 31

   11 unary_operator: '*' .

    $défaut  réduction par utilisation de la règle 11 (unary_operator)


État 32

   12 unary_operator: '-' .

    $défaut  réduction par utilisation de la règle 12 (unary_operator)


État 33

   58 expression_statement: ';' .

    $défaut  réduction par utilisation de la règle 58 (expression_statement)


État 34

   49 compound_statement: '{' '}' .

    $défaut  réduction par utilisation de la règle 49 (compound_statement)


État 35

    3 postfix_expression: primary_expression .
   14 multiplicative_expression: primary_expression . '*' primary_expression
   15                          | primary_expression . '/' primary_expression
   17 additive_expression: primary_expression . '+' primary_expression
   18                    | primary_expression . '-' primary_expression
   20 relational_expression: primary_expression . '<' primary_expression
   21                      | primary_expression . '>' primary_expression
   22                      | primary_expression . LE_OP primary_expression
   23                      | primary_expression . GE_OP primary_expression
   25 equality_expression: primary_expression . EQ_OP primary_expression
   26                    | primary_expression . NE_OP primary_expression
   29 expression: primary_expression . '=' additive_expression

    LE_OP  décalage et aller à l'état 64
    GE_OP  décalage et aller à l'état 65
    EQ_OP  décalage et aller à l'état 66
    NE_OP  décalage et aller à l'état 67
    '*'    décalage et aller à l'état 68
    '-'    décalage et aller à l'état 69
    '/'    décalage et aller à l'état 70
    '+'    décalage et aller à l'état 71
    '<'    décalage et aller à l'état 72
    '>'    décalage et aller à l'état 73
    '='    décalage et aller à l'état 74

    $défaut  réduction par utilisation de la règle 3 (postfix_expression)


État 36

    4 postfix_expression: postfix_expression . '(' ')'
    5                   | postfix_expression . '(' argument_expression_list ')'
    8 unary_expression: postfix_expression .

    '('  décalage et aller à l'état 75

    $défaut  réduction par utilisation de la règle 8 (unary_expression)


État 37

   13 multiplicative_expression: unary_expression .

    $défaut  réduction par utilisation de la règle 13 (multiplicative_expression)


État 38

    9 unary_expression: unary_operator . primary_expression
   28 expression: unary_operator . primary_expression '=' primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 76


État 39

   16 additive_expression: multiplicative_expression .

    $défaut  réduction par utilisation de la règle 16 (additive_expression)


État 40

   19 relational_expression: additive_expression .

    $défaut  réduction par utilisation de la règle 19 (relational_expression)


État 41

   24 equality_expression: relational_expression .

    $défaut  réduction par utilisation de la règle 24 (equality_expression)


État 42

   27 expression: equality_expression .

    $défaut  réduction par utilisation de la règle 27 (expression)


État 43

   59 expression_statement: expression . ';'

    ';'  décalage et aller à l'état 77


État 44

   53 declaration_list: declaration .

    $défaut  réduction par utilisation de la règle 53 (declaration_list)


État 45

   30 declaration: declaration_specifiers . declarator ';'

    IDENTIFIER  décalage et aller à l'état 11
    '('         décalage et aller à l'état 12
    '*'         décalage et aller à l'état 13

    declarator         aller à l'état 78
    direct_declarator  aller à l'état 15


État 46

   55 statement_list: statement .

    $défaut  réduction par utilisation de la règle 55 (statement_list)


État 47

   44 statement: compound_statement .

    $défaut  réduction par utilisation de la règle 44 (statement)


État 48

   51 compound_statement: '{' declaration_list . '}'
   52                   | '{' declaration_list . statement_list '}'
   54 declaration_list: declaration_list . declaration

    IDENTIFIER  décalage et aller à l'état 25
    CONSTANT    décalage et aller à l'état 26
    EXTERN      décalage et aller à l'état 1
    INT         décalage et aller à l'état 2
    VOID        décalage et aller à l'état 3
    IF          décalage et aller à l'état 27
    RETURN      décalage et aller à l'état 28
    GOTO        décalage et aller à l'état 29
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32
    ';'         décalage et aller à l'état 33
    '{'         décalage et aller à l'état 21
    '}'         décalage et aller à l'état 79

    primary_expression         aller à l'état 35
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 38
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 42
    expression                 aller à l'état 43
    declaration                aller à l'état 80
    declaration_specifiers     aller à l'état 45
    type_specifier             aller à l'état 6
    statement                  aller à l'état 46
    compound_statement         aller à l'état 47
    statement_list             aller à l'état 81
    labeled_statement          aller à l'état 50
    expression_statement       aller à l'état 51
    selection_statement        aller à l'état 52
    jump_statement             aller à l'état 53


État 49

   50 compound_statement: '{' statement_list . '}'
   56 statement_list: statement_list . statement

    IDENTIFIER  décalage et aller à l'état 25
    CONSTANT    décalage et aller à l'état 26
    IF          décalage et aller à l'état 27
    RETURN      décalage et aller à l'état 28
    GOTO        décalage et aller à l'état 29
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32
    ';'         décalage et aller à l'état 33
    '{'         décalage et aller à l'état 21
    '}'         décalage et aller à l'état 82

    primary_expression         aller à l'état 35
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 38
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 42
    expression                 aller à l'état 43
    statement                  aller à l'état 83
    compound_statement         aller à l'état 47
    labeled_statement          aller à l'état 50
    expression_statement       aller à l'état 51
    selection_statement        aller à l'état 52
    jump_statement             aller à l'état 53


État 50

   45 statement: labeled_statement .

    $défaut  réduction par utilisation de la règle 45 (statement)


État 51

   46 statement: expression_statement .

    $défaut  réduction par utilisation de la règle 46 (statement)


État 52

   47 statement: selection_statement .

    $défaut  réduction par utilisation de la règle 47 (statement)


État 53

   48 statement: jump_statement .

    $défaut  réduction par utilisation de la règle 48 (statement)


État 54

   40 direct_declarator: direct_declarator '(' ')' .

    $défaut  réduction par utilisation de la règle 40 (direct_declarator)


État 55

   43 parameter_declaration: declaration_specifiers . declarator

    IDENTIFIER  décalage et aller à l'état 11
    '('         décalage et aller à l'état 12
    '*'         décalage et aller à l'état 13

    declarator         aller à l'état 84
    direct_declarator  aller à l'état 15


État 56

   39 direct_declarator: direct_declarator '(' parameter_list . ')'
   42 parameter_list: parameter_list . ',' parameter_declaration

    ')'  décalage et aller à l'état 85
    ','  décalage et aller à l'état 86


État 57

   41 parameter_list: parameter_declaration .

    $défaut  réduction par utilisation de la règle 41 (parameter_list)


État 58

   57 labeled_statement: IDENTIFIER ':' . statement

    IDENTIFIER  décalage et aller à l'état 25
    CONSTANT    décalage et aller à l'état 26
    IF          décalage et aller à l'état 27
    RETURN      décalage et aller à l'état 28
    GOTO        décalage et aller à l'état 29
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32
    ';'         décalage et aller à l'état 33
    '{'         décalage et aller à l'état 21

    primary_expression         aller à l'état 35
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 38
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 42
    expression                 aller à l'état 43
    statement                  aller à l'état 87
    compound_statement         aller à l'état 47
    labeled_statement          aller à l'état 50
    expression_statement       aller à l'état 51
    selection_statement        aller à l'état 52
    jump_statement             aller à l'état 53


État 59

   60 selection_statement: IF '(' . equality_expression ')' GOTO IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32

    primary_expression         aller à l'état 88
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 89
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 90


État 60

    1 primary_expression: IDENTIFIER .

    $défaut  réduction par utilisation de la règle 1 (primary_expression)


État 61

   61 jump_statement: RETURN ';' .

    $défaut  réduction par utilisation de la règle 61 (jump_statement)


État 62

   62 jump_statement: RETURN expression . ';'

    ';'  décalage et aller à l'état 91


État 63

   63 jump_statement: GOTO IDENTIFIER . ';'

    ';'  décalage et aller à l'état 92


État 64

   22 relational_expression: primary_expression LE_OP . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 93


État 65

   23 relational_expression: primary_expression GE_OP . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 94


État 66

   25 equality_expression: primary_expression EQ_OP . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 95


État 67

   26 equality_expression: primary_expression NE_OP . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 96


État 68

   14 multiplicative_expression: primary_expression '*' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 97


État 69

   18 additive_expression: primary_expression '-' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 98


État 70

   15 multiplicative_expression: primary_expression '/' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 99


État 71

   17 additive_expression: primary_expression '+' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 100


État 72

   20 relational_expression: primary_expression '<' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 101


État 73

   21 relational_expression: primary_expression '>' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 102


État 74

   29 expression: primary_expression '=' . additive_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32

    primary_expression         aller à l'état 103
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 89
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 104


État 75

    4 postfix_expression: postfix_expression '(' . ')'
    5                   | postfix_expression '(' . argument_expression_list ')'

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26
    ')'         décalage et aller à l'état 105

    primary_expression        aller à l'état 106
    argument_expression_list  aller à l'état 107


État 76

    9 unary_expression: unary_operator primary_expression .
   28 expression: unary_operator primary_expression . '=' primary_expression

    '='  décalage et aller à l'état 108

    $défaut  réduction par utilisation de la règle 9 (unary_expression)


État 77

   59 expression_statement: expression ';' .

    $défaut  réduction par utilisation de la règle 59 (expression_statement)


État 78

   30 declaration: declaration_specifiers declarator . ';'

    ';'  décalage et aller à l'état 20


État 79

   51 compound_statement: '{' declaration_list '}' .

    $défaut  réduction par utilisation de la règle 51 (compound_statement)


État 80

   54 declaration_list: declaration_list declaration .

    $défaut  réduction par utilisation de la règle 54 (declaration_list)


État 81

   52 compound_statement: '{' declaration_list statement_list . '}'
   56 statement_list: statement_list . statement

    IDENTIFIER  décalage et aller à l'état 25
    CONSTANT    décalage et aller à l'état 26
    IF          décalage et aller à l'état 27
    RETURN      décalage et aller à l'état 28
    GOTO        décalage et aller à l'état 29
    '&'         décalage et aller à l'état 30
    '*'         décalage et aller à l'état 31
    '-'         décalage et aller à l'état 32
    ';'         décalage et aller à l'état 33
    '{'         décalage et aller à l'état 21
    '}'         décalage et aller à l'état 109

    primary_expression         aller à l'état 35
    postfix_expression         aller à l'état 36
    unary_expression           aller à l'état 37
    unary_operator             aller à l'état 38
    multiplicative_expression  aller à l'état 39
    additive_expression        aller à l'état 40
    relational_expression      aller à l'état 41
    equality_expression        aller à l'état 42
    expression                 aller à l'état 43
    statement                  aller à l'état 83
    compound_statement         aller à l'état 47
    labeled_statement          aller à l'état 50
    expression_statement       aller à l'état 51
    selection_statement        aller à l'état 52
    jump_statement             aller à l'état 53


État 82

   50 compound_statement: '{' statement_list '}' .

    $défaut  réduction par utilisation de la règle 50 (compound_statement)


État 83

   56 statement_list: statement_list statement .

    $défaut  réduction par utilisation de la règle 56 (statement_list)


État 84

   43 parameter_declaration: declaration_specifiers declarator .

    $défaut  réduction par utilisation de la règle 43 (parameter_declaration)


État 85

   39 direct_declarator: direct_declarator '(' parameter_list ')' .

    $défaut  réduction par utilisation de la règle 39 (direct_declarator)


État 86

   42 parameter_list: parameter_list ',' . parameter_declaration

    EXTERN  décalage et aller à l'état 1
    INT     décalage et aller à l'état 2
    VOID    décalage et aller à l'état 3

    declaration_specifiers  aller à l'état 55
    type_specifier          aller à l'état 6
    parameter_declaration   aller à l'état 110


État 87

   57 labeled_statement: IDENTIFIER ':' statement .

    $défaut  réduction par utilisation de la règle 57 (labeled_statement)


État 88

    3 postfix_expression: primary_expression .
   14 multiplicative_expression: primary_expression . '*' primary_expression
   15                          | primary_expression . '/' primary_expression
   17 additive_expression: primary_expression . '+' primary_expression
   18                    | primary_expression . '-' primary_expression
   20 relational_expression: primary_expression . '<' primary_expression
   21                      | primary_expression . '>' primary_expression
   22                      | primary_expression . LE_OP primary_expression
   23                      | primary_expression . GE_OP primary_expression
   25 equality_expression: primary_expression . EQ_OP primary_expression
   26                    | primary_expression . NE_OP primary_expression

    LE_OP  décalage et aller à l'état 64
    GE_OP  décalage et aller à l'état 65
    EQ_OP  décalage et aller à l'état 66
    NE_OP  décalage et aller à l'état 67
    '*'    décalage et aller à l'état 68
    '-'    décalage et aller à l'état 69
    '/'    décalage et aller à l'état 70
    '+'    décalage et aller à l'état 71
    '<'    décalage et aller à l'état 72
    '>'    décalage et aller à l'état 73

    $défaut  réduction par utilisation de la règle 3 (postfix_expression)


État 89

    9 unary_expression: unary_operator . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 111


État 90

   60 selection_statement: IF '(' equality_expression . ')' GOTO IDENTIFIER ';'

    ')'  décalage et aller à l'état 112


État 91

   62 jump_statement: RETURN expression ';' .

    $défaut  réduction par utilisation de la règle 62 (jump_statement)


État 92

   63 jump_statement: GOTO IDENTIFIER ';' .

    $défaut  réduction par utilisation de la règle 63 (jump_statement)


État 93

   22 relational_expression: primary_expression LE_OP primary_expression .

    $défaut  réduction par utilisation de la règle 22 (relational_expression)


État 94

   23 relational_expression: primary_expression GE_OP primary_expression .

    $défaut  réduction par utilisation de la règle 23 (relational_expression)


État 95

   25 equality_expression: primary_expression EQ_OP primary_expression .

    $défaut  réduction par utilisation de la règle 25 (equality_expression)


État 96

   26 equality_expression: primary_expression NE_OP primary_expression .

    $défaut  réduction par utilisation de la règle 26 (equality_expression)


État 97

   14 multiplicative_expression: primary_expression '*' primary_expression .

    $défaut  réduction par utilisation de la règle 14 (multiplicative_expression)


État 98

   18 additive_expression: primary_expression '-' primary_expression .

    $défaut  réduction par utilisation de la règle 18 (additive_expression)


État 99

   15 multiplicative_expression: primary_expression '/' primary_expression .

    $défaut  réduction par utilisation de la règle 15 (multiplicative_expression)


État 100

   17 additive_expression: primary_expression '+' primary_expression .

    $défaut  réduction par utilisation de la règle 17 (additive_expression)


État 101

   20 relational_expression: primary_expression '<' primary_expression .

    $défaut  réduction par utilisation de la règle 20 (relational_expression)


État 102

   21 relational_expression: primary_expression '>' primary_expression .

    $défaut  réduction par utilisation de la règle 21 (relational_expression)


État 103

    3 postfix_expression: primary_expression .
   14 multiplicative_expression: primary_expression . '*' primary_expression
   15                          | primary_expression . '/' primary_expression
   17 additive_expression: primary_expression . '+' primary_expression
   18                    | primary_expression . '-' primary_expression

    '*'  décalage et aller à l'état 68
    '-'  décalage et aller à l'état 69
    '/'  décalage et aller à l'état 70
    '+'  décalage et aller à l'état 71

    $défaut  réduction par utilisation de la règle 3 (postfix_expression)


État 104

   29 expression: primary_expression '=' additive_expression .

    $défaut  réduction par utilisation de la règle 29 (expression)


État 105

    4 postfix_expression: postfix_expression '(' ')' .

    $défaut  réduction par utilisation de la règle 4 (postfix_expression)


État 106

    6 argument_expression_list: primary_expression .

    $défaut  réduction par utilisation de la règle 6 (argument_expression_list)


État 107

    5 postfix_expression: postfix_expression '(' argument_expression_list . ')'
    7 argument_expression_list: argument_expression_list . ',' primary_expression

    ')'  décalage et aller à l'état 113
    ','  décalage et aller à l'état 114


État 108

   28 expression: unary_operator primary_expression '=' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 115


État 109

   52 compound_statement: '{' declaration_list statement_list '}' .

    $défaut  réduction par utilisation de la règle 52 (compound_statement)


État 110

   42 parameter_list: parameter_list ',' parameter_declaration .

    $défaut  réduction par utilisation de la règle 42 (parameter_list)


État 111

    9 unary_expression: unary_operator primary_expression .

    $défaut  réduction par utilisation de la règle 9 (unary_expression)


État 112

   60 selection_statement: IF '(' equality_expression ')' . GOTO IDENTIFIER ';'

    GOTO  décalage et aller à l'état 116


État 113

    5 postfix_expression: postfix_expression '(' argument_expression_list ')' .

    $défaut  réduction par utilisation de la règle 5 (postfix_expression)


État 114

    7 argument_expression_list: argument_expression_list ',' . primary_expression

    IDENTIFIER  décalage et aller à l'état 60
    CONSTANT    décalage et aller à l'état 26

    primary_expression  aller à l'état 117


État 115

   28 expression: unary_operator primary_expression '=' primary_expression .

    $défaut  réduction par utilisation de la règle 28 (expression)


État 116

   60 selection_statement: IF '(' equality_expression ')' GOTO . IDENTIFIER ';'

    IDENTIFIER  décalage et aller à l'état 118


État 117

    7 argument_expression_list: argument_expression_list ',' primary_expression .

    $défaut  réduction par utilisation de la règle 7 (argument_expression_list)


État 118

   60 selection_statement: IF '(' equality_expression ')' GOTO IDENTIFIER . ';'

    ';'  décalage et aller à l'état 119


État 119

   60 selection_statement: IF '(' equality_expression ')' GOTO IDENTIFIER ';' .

    $défaut  réduction par utilisation de la règle 60 (selection_statement)
